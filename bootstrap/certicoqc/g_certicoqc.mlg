(*i camlp4deps: "grammar/grammar.cma" i*)

DECLARE PLUGIN "coq-certicoqc.plugin"

{
open Pp
open Certicoqc
open Ltac_plugin
open Stdarg
open Pcoq.Prim
open Plugin_utils
open Certicoq
open Tacarg
open G_certicoq_vanilla
}

VERNAC COMMAND EXTEND CertiCoqCCompile CLASSIFIED AS QUERY
| [ "CertiCoqC" "Compile" vanilla_cargs_list(l) global(gr) ] -> {
    let gr = Nametab.global gr in
    let opts = make_options l [] (get_name gr) in
    Certicoqc.compile_only opts gr []
  }
| [ "CertiCoqC" "Compile" vanilla_cargs_list(l) global(gr) "Extract" "Constants" "[" vanilla_extract_cnst_list_sep(cs, ",") "]" "Include" "[" vanilla_cinclude_list_sep(imps, ",") "]" ] -> {
    let gr = Nametab.global gr in
    let opts = make_options l cs (get_name gr) in
    Certicoqc.compile_only opts gr imps
  }
| [ "CertiCoqC" "Run" vanilla_cargs_list(l) global(gr) "Extract" "Constants" "[" vanilla_extract_cnst_list_sep(cs, ",") "]" "Include" "[" vanilla_cinclude_list_sep(imps, ",") "]" ] -> {
  let gr = Nametab.global gr in
  let opts = make_options l cs (get_name gr) in
  Certicoqc.compile_C opts gr imps
  }
| [ "CertiCoqC" "Run" vanilla_cargs_list(l) global(gr) ] -> {
  let gr = Nametab.global gr in
  let opts = make_options l [] (get_name gr) in
  Certicoqc.compile_C opts gr []
  }
| [ "CertiCoqC" "Show" "IR" vanilla_cargs_list(l) global(gr) ] -> {
    let gr = Nametab.global gr in
    let opts = make_options l [] (get_name gr) in
    Certicoqc.show_ir opts gr
  }
| [ "CertiCoqC" "Show" "IR" vanilla_cargs_list(l) global(gr) "Extract" "Constants" "[" vanilla_extract_cnst_list_sep(cs, ",") "]" ] -> {
    let gr = Nametab.global gr in
    let opts = make_options l cs (get_name gr) in
    Certicoqc.show_ir opts gr
  }
| [ "CertiCoqC" "FFI" vanilla_ffiargs_list(l) global(gr) ] -> {
    let gr = Nametab.global gr in
    let opts = make_options l [] "" in
    Certicoqc.ffi_command opts gr
  }
| [ "CertiCoqC" "Generate" "Glue" vanilla_glueargs_list(l) "[" global_list_sep(grs, ",") "]" ] -> {
    let grs = List.map Nametab.global grs in
    let opts = make_options l [] "" in
    Certicoqc.glue_command opts grs
  }
| [ "CertiCoqC" "-help" ] -> {
    Feedback.msg_info (str help_msg)
  }
END


VERNAC COMMAND EXTEND CertiCoqC_Eval CLASSIFIED AS SIDEFF
| [ "CertiCoqC" "Eval" vanilla_cargs_list(l) global(gr) "Extract" "Constants" "[" vanilla_extract_cnst_list_sep(cs, ",") "]" "Include" "[" vanilla_cinclude_list_sep(imps, ",") "]" ] -> {
  let gr = Nametab.global gr in
  let opts = Certicoq.make_options l cs (get_name gr) in
  let result = Certicoq.eval_gr opts gr imps in 
  Feedback.msg_notice Pp.(str" = " ++ Printer.pr_constr_env (Global.env ()) Evd.empty result)
  }
| [ "CertiCoqC" "Eval" vanilla_cargs_list(l) global(gr) ] -> {
  let gr = Nametab.global gr in
  let opts = Certicoq.make_options l [] (get_name gr) in
  let result = Certicoq.eval_gr opts gr [] in
  Feedback.msg_notice Pp.(str" = " ++ Printer.pr_constr_env (Global.env ()) Evd.empty result)
  }
END

TACTIC EXTEND CertiCoqc_eval
| [ "certicoqc_eval" vanilla_cargs_list(l) constr(c) tactic(tac) ] ->
  { (* quote and evaluate the given term, unquote, pass the result to t *)
    Proofview.Goal.enter begin fun gl ->
      let env = Proofview.Goal.env gl in
      let sigma = Proofview.Goal.sigma gl in
      let opts = Certicoq.make_options l [] "goal" in
      let opts = Certicoq.{ opts with toplevel_name = "goal" } in
      let c' = Certicoq.eval opts env sigma c [] in 
      ltac_apply tac (List.map to_ltac_val [EConstr.of_constr c'])
  end }
END
