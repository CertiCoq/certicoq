(*i camlp4deps: "grammar/grammar.cma" i*)

DECLARE PLUGIN "coq-certicoq.plugin"

{
open Names
open Pp
open Certicoq
open Ltac_plugin
open Stdarg
open Pcoq.Prim
open Plugin_utils
open Tacexpr
open Tacinterp
open Stdarg
open Tacarg
open Genredexpr

(** Calling Ltac **)

let ltac_lcall tac args =
  let (location, name) = Loc.tag (Names.Id.of_string tac)
    (* Loc.tag @@ Names.Id.of_string tac *)
  in
  CAst.make ?loc:location (Tacexpr.TacArg(Tacexpr.TacCall
                              (CAst.make (Locus.ArgVar (CAst.make ?loc:location name),args))))


let ltac_apply (f : Value.t) (args: Tacinterp.Value.t list) =
  let fold arg (i, vars, lfun) =
    let id = Names.Id.of_string ("x" ^ string_of_int i) in
    let (l,n) = (Loc.tag id) in
    let x = Reference (Locus.ArgVar (CAst.make ?loc:l n)) in
    (succ i, x :: vars, Id.Map.add id arg lfun)
  in
  let (_, args, lfun) = List.fold_right fold args (0, [], Id.Map.empty) in
  let lfun = Id.Map.add (Id.of_string "F") f lfun in
  let ist = { (Tacinterp.default_ist ()) with Tacinterp.lfun = lfun; } in
  Tacinterp.eval_tactic_ist ist (ltac_lcall "F" args)

let to_ltac_val c = Tacinterp.Value.of_constr c

let globref_of_qualid ?loc (gr : Libnames.qualid) : Names.GlobRef.t  =
  match Constrintern.locate_reference gr with
  | None -> CErrors.user_err ?loc Pp.(Libnames.pr_qualid gr ++ str " not found.")
  | Some g -> g

let quoted_globref_of_qualid ~loc (gr : Libnames.qualid) : Metacoq_template_plugin.Kernames.global_reference =
  Metacoq_template_plugin.Ast_quoter.quote_global_reference (globref_of_qualid ~loc gr)

let inductive_of_qualid ~loc (gr : Libnames.qualid) : Kernames.inductive =
  let open Metacoq_template_plugin in
  match quoted_globref_of_qualid ~loc gr with
  | Kernames.ConstRef kn -> CErrors.user_err ~loc Pp.(str "Expected an inductive name but found a constant.")
  | Kernames.VarRef(v) -> CErrors.user_err ~loc Pp.(str "Expected an inductive name but found a variable.")
  | Kernames.IndRef(i) -> (Obj.magic i)
  | Kernames.ConstructRef(_, _) -> CErrors.user_err ~loc Pp.(str "Expected an inductive name but found a constructor.")

}

ARGUMENT EXTEND cargs
| [ "-typed-erasure" ] -> { TYPED_ERASURE }
| [ "-unsafe-erasure" ] -> { UNSAFE_ERASURE }
| [ "-bypass_qed" ] -> { BYPASS_QED }
| [ "-cps" ] -> { CPS }
| [ "-time" ] -> { TIME }
| [ "-time_anf" ] -> { TIMEANF }
| [ "-O" natural(n) ] -> { OPT(n) }
| [ "-debug" ] -> { DEBUG }
| [ "-args" natural(n) ] -> { ARGS(n) }
| [ "-config" natural(n) ] -> { ANFCONFIG(n) }
(* Zoe: -config  To measure different ANF configurations. Not for user purposes *)
| [ "-build_dir" string(s) ] -> { BUILDDIR(s) }
| [ "-dev" natural(n) ] -> { DEV(n) }
| [ "-ext" string(s) ] -> { EXT(s) }
| [ "-file" string(s) ] -> { FILENAME(s) }
| [ "-toplevel_name" string(s) ] -> { TOPLEVEL_NAME(s) }
END

VERNAC ARGUMENT EXTEND extract_cnst 
| [ reference(gr) "=>" string(str) ] -> { 
  try (extract_constant (Option.get (Constrintern.locate_reference gr)) str, false)
  with Not_found -> CErrors.user_err ~loc Pp.(str"Reference " ++ Libnames.pr_qualid gr ++ str" not found") }
| [ reference(gr) "=>" string(str) "with" "tinfo" ] -> { 
  try (extract_constant (Option.get (Constrintern.locate_reference gr)) str, true)
  with Not_found -> CErrors.user_err ~loc Pp.(str"Reference " ++ Libnames.pr_qualid gr ++ str" not found") }
END

VERNAC ARGUMENT EXTEND ffiargs
| [ "-prefix" string(s) ] -> { PREFIX(s) }
| [ cargs(c) ] -> { c }
END

VERNAC ARGUMENT EXTEND glueargs
| [ "-cps" ] -> { CPS }
| [ "-debug" ] -> { DEBUG }
| [ "-args" natural(n) ] -> { ARGS(n) }
| [ "-file" string(s) ] -> { FILENAME(s) }
| [ "-build_dir" string(s) ] -> { BUILDDIR(s) }
END

VERNAC ARGUMENT EXTEND cinclude
| [ string(str) ] -> { FromRelativePath str }
| [ "Library" string(str) string_opt(str') ] -> { FromLibrary (str, str') }
| [ "Absolute" string(str) ] -> { FromAbsolutePath str }
END

VERNAC ARGUMENT EXTEND certiCoq_Register_extract_inductive 
| [ reference(gr) "=>" string(ty) "[" natural_list(cstrs) "]" ] ->
  { ((inductive_of_qualid ~loc gr), (ty, cstrs)) }
END

VERNAC COMMAND EXTEND CertiCoq_Register CLASSIFIED AS SIDEFF
| [ "CertiCoq" "Register" "[" extract_cnst_list_sep(l, ",") "]" "Include" "[" cinclude_list_sep(imps, ",") "]" ] -> {
    Certicoq.register l imps
  }
| [ "CertiCoq" "Extract" "Inductives" "[" certiCoq_Register_extract_inductive_list_sep(inds, ",") "]" ] -> {
    Certicoq.register_inductives inds
}
END

VERNAC COMMAND EXTEND CertiCoq_Compile CLASSIFIED AS QUERY
| [ "CertiCoq" "Compile" cargs_list(l) global(gr) ] -> {
    let gr = Nametab.global gr in
    let opts = Certicoq.make_options l [] (get_name gr) in
    Certicoq.compile_only opts gr []
  }
| [ "CertiCoq" "Compile" cargs_list(l) global(gr) "Extract" "Constants" "[" extract_cnst_list_sep(cs, ",") "]" "Include" "[" cinclude_list_sep(imps, ",") "]" ] -> {
    let gr = Nametab.global gr in
    let opts = Certicoq.make_options l cs (get_name gr) in
    Certicoq.compile_only opts gr imps
  }
| [ "CertiCoq" "Run" cargs_list(l) global(gr) "Extract" "Constants" "[" extract_cnst_list_sep(cs, ",") "]" "Include" "[" cinclude_list_sep(imps, ",") "]" ] -> {
  let gr = Nametab.global gr in
  let opts = Certicoq.make_options l cs (get_name gr) in
  Certicoq.compile_C opts gr imps
  }
| [ "CertiCoq" "Run" cargs_list(l) global(gr) ] -> {
  let gr = Nametab.global gr in
  let opts = Certicoq.make_options l [] (get_name gr) in
  Certicoq.compile_C opts gr []
  }
| [ "CertiCoq" "Show" "IR" cargs_list(l) global(gr) ] -> {
    let gr = Nametab.global gr in
    let opts = Certicoq.make_options l [] (get_name gr) in
    Certicoq.show_ir opts gr
  }
| [ "CertiCoq" "Show" "IR" cargs_list(l) global(gr) "Extract" "Constants" "[" extract_cnst_list_sep(cs, ",") "]" ] -> {
    let gr = Nametab.global gr in
    let opts = Certicoq.make_options l cs (get_name gr) in
    Certicoq.show_ir opts gr
  }
| [ "CertiCoq" "FFI" ffiargs_list(l) global(gr) ] -> {
    let gr = Nametab.global gr in
    let opts = Certicoq.make_options l [] "" in
    Certicoq.ffi_command opts gr
  }
| [ "CertiCoq" "Generate" "Glue" glueargs_list(l) "[" global_list_sep(grs, ",") "]" ] -> {
    let grs = List.map Nametab.global grs in
    let opts = Certicoq.make_options l [] "" in
    Certicoq.glue_command opts grs
  }
| [ "CertiCoq" "-help" ] -> {
    Feedback.msg_info (str help_msg)
  }
END

VERNAC COMMAND EXTEND CertiCoq_Eval CLASSIFIED AS SIDEFF
| [ "CertiCoq" "Eval" cargs_list(l) global(gr) "Extract" "Constants" "[" extract_cnst_list_sep(cs, ",") "]" "Include" "[" cinclude_list_sep(imps, ",") "]" ] -> {
  let gr = Nametab.global gr in
  let opts = Certicoq.make_options l cs (get_name gr) in
  let result = Certicoq.eval_gr opts gr imps in 
  Feedback.msg_notice Pp.(str" = " ++ Printer.pr_constr_env (Global.env ()) Evd.empty result)
  }
| [ "CertiCoq" "Eval" cargs_list(l) global(gr) ] -> {
  let gr = Nametab.global gr in
  let opts = Certicoq.make_options l [] (get_name gr) in
  let result = Certicoq.eval_gr opts gr [] in
  Feedback.msg_notice Pp.(str" = " ++ Printer.pr_constr_env (Global.env ()) Evd.empty result)
  }
END

TACTIC EXTEND CertiCoq_eval
| [ "certicoq_eval" cargs_list(l) constr(c) tactic(tac) ] ->
  { (* quote and evaluate the given term, unquote, pass the result to t *)
    Proofview.Goal.enter begin fun gl ->
      let env = Proofview.Goal.env gl in
      let sigma = Proofview.Goal.sigma gl in
      let opts = Certicoq.make_options l [] "goal" in
      let opts = Certicoq.{ opts with toplevel_name = "goal" } in
      let c' = Certicoq.eval opts env sigma c [] in 
      ltac_apply tac (List.map to_ltac_val [EConstr.of_constr c'])
  end }
END
